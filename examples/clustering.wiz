// Example demonstrating clustering on data loaded from CSV

// 1. Load all numeric data from the specific clustering CSV
// This will load 'value_to_cluster' and 'other_num' into a 2D array.
all_cluster_data = load_csv("cluster_data.csv");

// 2. Extract the column we want to cluster (first numeric column, index 0) using get_column
// This results in a 1D vector containing [1, 1.5, 2, 5, 5.5, 6, 10, 10.5, 11]
data_to_cluster = get_column(all_cluster_data, 0);

// 3. Define number of clusters (Wizuall variable)
num_clusters = 3;

// 4. Find clusters using the extracted Wizuall vector
// The 'gen_find_clusters' function should handle reshaping 1D -> 2D if needed for KMeans.
cluster_ids = find_clusters(data_to_cluster, num_clusters);

*-*
# Native Python block to show results and visualize

# Access Wizuall variables directly (they exist as Python vars in the generated code scope)
print("--- test_csv_cluster.wiz Output ---")
# Make sure numpy & plt are available (should be from gen_initial_imports)
import numpy as np
import matplotlib.pyplot as plt

# Check if data loading/extraction was successful before printing/plotting
if 'data_to_cluster' in locals() and data_to_cluster is not None:
    print(f"Data loaded and extracted for clustering (Column 0): {data_to_cluster}")
    print(f"Number of clusters requested: {num_clusters}")
    print(f"Cluster assignments found: {cluster_ids}") # cluster_ids is also a Wizuall var

    # Visualize the clustering using the extracted Wizuall variable 'data_to_cluster'
    if cluster_ids is not None and len(data_to_cluster) > 0:
        # Ensure data is a numpy array for plotting compatibility
        data_array = np.array(data_to_cluster)
        plt.figure()
        # Plot points on a 1D line (y=0), color by cluster ID
        plt.scatter(data_array, np.zeros_like(data_array), c=cluster_ids, cmap='viridis', s=100, alpha=0.7)
        plt.title(f'1D Data (from CSV Col 0) Clustered into {num_clusters} Groups')
        plt.yticks([]) # No meaningful y-axis
        plt.xlabel('Data Value')
        plt.grid(axis='x') # Add grid lines on x-axis
        plt.show()
    elif cluster_ids is None:
        print("Skipping cluster visualization as scikit-learn is not available or clustering failed.")
    else: # cluster_ids is not None but data might be empty
        print("Skipping cluster visualization due to empty data.")
else:
    print("Error: 'data_to_cluster' variable not found or is None. Cannot proceed with printing/plotting.")

print("--- End of Cluster Test ---")
*-*